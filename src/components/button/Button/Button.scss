@import "../../../styles/base";

/* ===================================================================
   BUTTON
   =================================================================== */

$height--button: var(--elementSize_regular);
$height--button-big: var(--elementSize_big);
$height--button-small: var(--elementSize_small);

$borderRadius: var(--button_borderRadius, var(--borderRadius_buttons));
$boxShadow: var(--button_boxShadow);
$boxShadowHover: var(--button_boxShadowHover, 0 2px 10px rgba(0, 0, 0, 0.1));

.base {
    position: relative;
    outline: none;
    height: $height--button;
    line-height: $height--button - 2px;
    font-family: var(--fontFamily_primary);
    font-size: var(--fontSize_regular);
    font-weight: var(--fontWeight_medium);
    border: none;
    cursor: pointer;
    border-radius: $borderRadius;
    text-decoration: none;
    user-select: none;
    transition: border-color 0.3s linear, color 0.3s linear, background-color 0.3s linear, border-radius 0.3s linear;
    max-width: 100%;
    box-shadow: $boxShadow;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0;

    .symbol {
        height: 100%;
        padding: 0.4em 0 0.4em 0.4em;
        flex-grow: 0;
        flex-shrink: 0;

        svg {
            max-height: 100%;
            width: 100%;
        }
    }

    &.withSymbol {
        .fill .content {
            padding-left: 0;
        }
    }

    .content {
        z-index: 2;
        display: flex;
        align-items: center;
        position: relative;
        justify-content: center;
        padding: 0 var(--spacing_large);
        flex-grow: 1;
        min-width: 0;
        height: 100%;
        @include m-truncate();
    }

    .shade {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: transparent;
        pointer-events: none;
        border-radius: $borderRadius;
        transition: border-radius 0.3s linear;
    }

    &:hover {
        box-shadow: $boxShadowHover;

        .shade {
            background: rgba(var(--color_contrast), 1);
            border: 1px solid rgba(var(--color_contrast), 1);
            opacity: 0.15;
        }
    }

    &:active,
    &.active {
        box-shadow: none;

        .shade {
            transition: none;
            background: rgba(var(--color_base), 1);
            border: 1px solid rgba(var(--color_base), 1);
            opacity: 0.06;
        }
    }
}

// Disabled
.base[disabled],
.base[disabled]:hover,
.base[disabled]:active {
    border-color: rgba(var(--color_base), 0.05);
    background-color: rgba(var(--color_base), 0.03);
    color: rgba(var(--color_base), 0.3);
    box-shadow: none;
    cursor: default;

    .icon {
        @include m-iconColor(rgba(var(--color_base), 0.2) !important);
    }

    .shade {
        display: none;
    }

    &:hover {
        color: rgba(var(--color_base), 0.3);
    }
}

/* ===================================================================
   LOADER (Busy)
   =================================================================== */

.loader {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    display: flex;
    align-items: center;
    padding: 0 var(--spacing_large);
}

/* ===================================================================
   BUTTON ICON
   =================================================================== */

.base {
    .icon {
        vertical-align: -3px;
        margin-right: 8px;
        margin-left: -3px;
        @include m-iconColor(rgba(var(--color_base), 1));
    }

    // Icon on the right side of label
    &.iconRight {
        .icon {
            margin-right: 0;
            margin-left: 8px;
        }
    }

    // Primary colored icon
    &.iconPrimary {
        .icon {
            @include m-iconColor(rgba(var(--color_primary), 1));
        }
    }

    // Info colored icon
    &.iconInfo {
        .icon {
            @include m-iconColor(rgba(var(--color_info), 1));
        }
    }

    // Success colored icon
    &.iconSuccess {
        .icon {
            @include m-iconColor(rgba(var(--color_success), 1));
        }
    }

    // Warning colored icon
    &.iconWarning {
        .icon {
            @include m-iconColor(rgba(var(--color_warning), 1));
        }
    }

    // Error colored icon
    &.iconError {
        .icon {
            @include m-iconColor(rgba(var(--color_error), 1));
        }
    }

    // Contrast colored icon
    &.iconContrast {
        .icon {
            @include m-iconColor(rgba(var(--color_contrast), 1));
        }
    }

    // Hide icon
    &.hideIcon {
        .icon {
            opacity: 0 !important;
        }
    }
}

/* ===================================================================
   LABEL SIZE
   =================================================================== */
.labelSizeBig {
    font-size: var(--fontSize_medium);
}

/* ===================================================================
   BUTTON COLORS
   =================================================================== */

.colorDefault {
    color: rgba(var(--color_base), 1);
    border: 1px solid rgba(var(--color_base), 0.2);
    background: rgba(var(--color_contrast), 1);

    &:hover {
        color: rgba(var(--color_base), 1);
    }
}

.colorPrimary {
    color: rgba(var(--color_primaryContrast), 1);
    background: rgba(var(--color_primary), 1);
    border: none;

    .icon {
        @include m-iconColor(rgba(var(--color_primaryContrast), 1));
    }

    &:hover {
        background-color: rgba(var(--color_primary), 1);
        color: rgba(var(--color_primaryContrast), 1);
    }
}

.colorSuccess {
    color: rgba(var(--color_statusText), 1);
    background-color: rgba(var(--color_success), 1);

    .icon {
        @include m-iconColor(rgba(var(--color_statusText), 1));
    }

    &:hover {
        border-color: rgba(var(--color_success), 1);
        color: rgba(var(--color_statusText), 1);
    }
}

.colorWarning {
    color: rgba(var(--color_statusText), 1);
    border-color: transparent;
    background-color: rgba(var(--color_warning), 1);

    .icon {
        @include m-iconColor(rgba(var(--color_statusText), 1));
    }

    &:hover {
        border-color: rgba(var(--color_warning), 1);
        background-color: rgba(var(--color_warning), 1);
        color: rgba(var(--color_statusText), 1);
    }
}

.colorError {
    color: rgba(var(--color_statusText), 1);
    border-color: transparent;
    background-color: rgba(var(--color_error), 1);

    .icon {
        @include m-iconColor(rgba(var(--color_statusText), 1));
    }

    &:hover {
        border-color: transparent;
        background-color: rgba(var(--color_error), 1);
        color: rgba(var(--color_statusText), 1);
    }
}

.colorInfo {
    color: rgba(var(--color_statusText), 1);
    border-color: transparent;
    background-color: rgba(var(--color_info), 1);

    .icon {
        @include m-iconColor(rgba(var(--color_statusText), 1));
    }

    &:hover {
        border-color: transparent;
        background-color: rgba(var(--color_info), 1);
        color: rgba(var(--color_statusText), 1);
    }
}

.colorSilent {
    color: rgba(var(--color_base), 0.8);
    border-color: rgba(var(--color_base), 0.05);
    background-color: transparent;

    .icon {
        @include m-iconColor(rgba(var(--color_base), 0.8));
    }

    &:hover {
        border-color: rgba(var(--color_base), 0.2);
        color: rgba(var(--color_base), 0.8);
        box-shadow: none;
    }
}



/* ===================================================================
   LABEL COLOR
   =================================================================== */

   .labelColorPrimary {
    color: rgba(var(--color_primary), 1);
    &:hover {
        color: rgba(var(--color_primary), 1);
    }
}

.labelColorSuccess {
    color: rgba(var(--color_success), 1);
    &:hover {
        color: rgba(var(--color_success), 1);
    }
}

.labelColorWarning {
    color: rgba(var(--color_warning), 1);
    &:hover {
        color: rgba(var(--color_warning), 1);
    }
}

.labelColorError {
    color: rgba(var(--color_error), 1);
    &:hover {
        color: rgba(var(--color_error), 1);
    }
}



/* ===================================================================
   BUTTON SIZES
   =================================================================== */

.sizeBig {
    height: $height--button-big;
    line-height: $height--button-big - 1px;
    font-size: var(--fontSize_medium);

    .icon {
        vertical-align: -4px;
        margin-right: 10px;
        @include m-iconSize($iconSize--medium);
    }
}

.sizeSmall {
    height: $height--button-small;
    line-height: $height--button-small - 2px;

    .content {
        padding: 0 var(--spacing_medium);
    }

    .icon {
        @include m-iconSize($iconSize--small);
        vertical-align: -2px;
    }
}

/* ===================================================================
   BUTTON MUTATORS
   =================================================================== */

.circle {
    border-radius: 100px;
    width: $height--button;

    .shade {
        border-radius: 100px;
    }

    .icon {
        margin: 0;
    }

    .loader {
        padding: 0.5em;
    }

    .content {
        padding: 0;
        justify-content: center;
    }

    &.sizeSmall {
        width: $height--button-small;
    }

    &.sizeBig {
        width: $height--button-big;
    }

    &.isBusy {
        .symbol {
            display: none;
        }
    }
}

.square {
    width: $height--button;

    .icon {
        margin: 0;
    }

    .content {
        padding: 0;
        justify-content: center;
    }

    .loader {
        padding: 0.5em;
    }

    &.sizeSmall {
        width: $height--button-small;
    }

    &.sizeBig {
        width: $height--button-big;
    }

    &.isBusy {
        .symbol {
            display: none;
        }
    }
}

.fill {
    width: 100%;

    .content {
        padding: 0 var(--spacing_regular);
    }
}

.pill {
    border-radius: 100px;
}

.hideLabel {
    transition: color 0s ease;
    color: rgba(0, 0, 0, 0) !important;
}
